import{_ as s,c as l,d as a,o as n}from"./app-CoLZFvGU.js";const t={};function e(h,i){return n(),l("div",null,i[0]||(i[0]=[a(`<h2 id="前端面试题" tabindex="-1"><a class="header-anchor" href="#前端面试题"><span>前端面试题</span></a></h2><ol><li>CSS相关：</li></ol><ul><li>各种选择器的优先级，看代码说出最后的样式结果</li><li>怎么开启动画加速，底层原理是什么</li><li>css实现一个三角形，画一个每条线的线宽是1px的三角形呢？</li><li>常见的水平垂直方式有几种</li><li>标准盒模型和怪异盒模型的理解</li><li>Flex常见的属性 flex：1代表什么</li><li>Rem你是怎么做适配的</li><li>媒体查询是什么</li><li>首屏性能优化你是怎么做的</li><li>说一下bfc bfc有什么优缺点</li><li>inline 元素中哪些属性生效：width、height、padding、margin</li><li>relative 元素是怎么定位的</li><li>flex布局怎么实现左边固定 右边自适应</li><li>了解伪元素和伪类吗</li></ul><ol start="2"><li>JS 相关：</li></ol><ul><li><p>js有哪几种数据类型</p></li><li><p>浏览器的重排和重绘</p></li><li><p>闭包的优缺点</p></li><li><p>标记垃圾回收</p></li><li><p>var如何模拟let</p></li><li><p>undefined == null 返回什么？为什么？<a href="https://juejin.cn/post/6844904117723201544" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/6844904117723201544</a></p></li><li><p>什么是原型什么是原型链</p></li><li><p>手写代码，实现继承，es5的构造函数那种继承。说一下每行代码为啥这么写</p></li><li><p>为什么数组长度能任意变化？</p></li><li><p>数组flat和flatMap区别</p></li><li><p>怎么做文件上传和断点续传</p></li><li><p>函数的 name 属性，看代码说输出，name 属性能手动修改吗</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // &quot;a&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> a</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // ES5中为&quot;&quot;, ES6 中为 &quot;a&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">a</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // ES5中为&quot;a&quot;, ES6 中为 &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> a</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // &quot;b&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">a</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // &quot;b&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 修改</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;1111&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 不变，还是&quot;b&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>new 的过程中发生了什么，实现一个简单的 new，注意顺序</p></li><li><p>ES6 默认开启尾递归优化，其原理是什么，为什么能优化？</p><div class="hint-container tip"><p class="hint-container-title">回答</p><p>在 JavaScript 中，尾递归优化是一种优化技术，它可以确保某些递归函数在被调用时不会创建新的堆栈帧，从而避免堆栈溢出的风险。这个优化特性是在 ECMAScript 6 (ES6) 中引入的。尾递归的原理是将递归调用放在函数的最后执行位置，以便在递归调用之后没有其他代码需要执行。这使得 JavaScript 引擎能够对递归进行优化。当函数调用自身并且是尾部调用时，引擎会复用当前函数的执行上下文，而不是为每一次递归调用创建一个新的执行上下文。这样，没有新的堆栈帧被创建，递归深度可以大大增加，而不会导致堆栈溢出错误。要使尾递归优化生效，需要满足以下条件：1. 函数的最后一个操作是递归调用自身。2. 递归调用是函数的最后一步操作，没有其他操作需要在递归调用之后执行。</p></div><p>举例：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 非尾递归版本</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> factorial</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">n</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> factorial</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">n</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 尾递归版本</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> factorialTailRecursive</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">accumulator</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">n</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> accumulator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> factorialTailRecursive</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">n</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">n</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> accumulator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>用 ES5 实现 const：defineProperty</p></li><li><p>实现一个有节流效果的轮询函数</p></li><li><p>实现一个类，其实例可以链式调用，它有一个 sleep 方法，可以 sleep 一段时间后再后续调用</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> boy</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> PlayBoy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Tom&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> boy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sayHi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">play</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;王者&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">play</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;跳一跳&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 输出</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 大家好我是Tom</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 1s 之后</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 我在玩王者</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 2s 之后</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 我在玩跳一跳</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>async/await 的错误怎么捕获</p></li><li><p>实现 Promise.all 和 Promise.race</p></li><li><p>实现一个能顺利执行 next 中间件的函数：函数柯里化</p></li><li><p>Promise的原型方法、静态方法</p></li><li><p>有数组var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];如果通过如下代码将其随机打乱顺序，是否可行？为什么 arr.sort(function() { return Math.random() - 0.5 })</p></li><li><p>箭头函数和普通函数有什么区别?</p></li><li><p>New操作符做了什么事情?</p></li><li><p>说一下eventloop,为什么要引入宏任务和微任务 <a href="https://segmentfault.com/a/1190000016278115" target="_blank" rel="noopener noreferrer">https://segmentfault.com/a/1190000016278115</a></p></li><li><p>什么是闭包，闭包的作用是什么</p></li><li><p>Promise是什么?</p></li><li><p>Set 和 Map有什么区别？</p></li><li><p>map和foreach有什么区别?</p></li><li><p>localStorage sessionStorage cookies 有什么区别?</p></li><li><p>Es6常见的语法你知道哪一些</p></li><li><p>哪些情况会导致内存泄漏</p></li><li><p>说一下常见的检测数据类型的几种方式?</p></li><li><p>说一下slice splice split 的区别?</p></li><li><p>说一下怎么把类数组转换为数组?</p></li><li><p>说一下数组如何去重,你有几种方法?</p></li><li><p>说一下怎么取出数组最多的一项？</p></li><li><p>说一下JSON.stringify有什么缺点？</p></li><li><p>说一下for...in 和 for...of的区别?</p></li><li><p>说一下类组件和函数组件的区别?</p></li><li><p>addEventListener 的执行顺序</p></li><li><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   setTimeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">   console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   }, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 问题1：输出结果是什么？为什么</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 问题2：请改造成正确的输出</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 问题3：请改造成 1-&gt;2-&gt;3-&gt;4-&gt;5 每个输出都等待 1s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>输出什么</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> length</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> obj</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">     length</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     test1</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">       return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">   obj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">test2</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> fn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">   console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">obj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">test1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">   console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">obj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">test1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">   console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">obj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">test2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">   console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">obj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">test2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>const arr1 = [1,2,3,4,5] const arr2 = arr1.push(6)为什么不违背设计原理</p></li><li><p>babel是怎么做到es6转es5的</p></li><li><p>webSocket通信如何处理安全性？</p></li></ul><ol start="3"><li><p>Vue相关:</p><ul><li>手写 h 函数实现</li><li>vue和js jq的区别</li><li>如何理解数据驱动视图</li><li>组件封装的原则</li><li>vue中diff算法的优缺点</li><li>Vue的生命周期是什么 每个钩子里面具体做了什么事情</li><li>组件之间的传值有几种方式</li><li>Eventbus具体是怎么实现的</li><li>父组件到子组件更新的方式是什么样的</li><li>vue2的双向绑定简单说一下？</li><li>Hash和history有什么区别 <a href="https://juejin.cn/post/6993840419041706014" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/6993840419041706014</a></li><li>v-model语法糖是怎么实现的</li><li>虚拟 DOM 的好处：函数式编程模式、多端渲染</li><li>defineProperty的缺点是什么</li><li>当我们在vue中同时对多个数据进行了操作，dom是更新多次还是更新一次?它是怎么知道我后续没有更新的操作了呢？如果我一个操作是正常的同步操作，另一个操作放在setTimeout里面，会更新几次？</li><li>Vue 的插件机制，底层原理是什么</li><li>Vue2 和 Vue3 响应式实现上的区别，为什么要改动</li><li>写一个 Vue 输入框组件，有防抖功能，并处理父子组件传参</li><li>Vue router 路由守卫的钩子和使用场景</li><li>Vue nextTick 的用法和底层实现原理</li><li>Vue3 的优化点有哪些</li><li>Vue3 移除了 .native 事件修饰符，我们怎么去写原生事件？</li><li>Vue 中 computed 的设计动机以及底层实现</li><li>Vue 模板是如何编译的</li><li>Vue router 底层原理，不同模式的区别，history 路由刷新页面 404 的原因和解决方法</li><li>Vue 项目中的 Model 层设计</li><li>Vuex 中的变量打包之后存在哪里？和全局作用域中的变量有什么区别</li><li>Vue 中 CSS scoped 的原理</li><li>Vue 中 keep-alive 的实现原理，内部使用的缓存算法是什么，缓存的是什么，里面有哪些钩子</li><li>$set 的使用场景</li><li>用过vue-router吗？比如说我们切换路由的时候，它是怎么实现组件的替换的？监听path怎么实现替换组件的？</li><li>Vuex有哪些基本属性?为什么 Vuex 的 mutation 中不能做异步操作?actions 和 mutations 的区别，actions 是直接修改状态吗</li><li>计算属性和watch有什么区别?以及它们的运用场景?</li><li>插槽是什么 怎么使用的</li><li>自定义指令你是怎么用的</li><li>怎么解决白屏问题</li><li>Vue的父子组件生命周期钩子函数执行顺序？</li><li>说一下data为什么是一个函数而不是一个对象? JavaScript中的对象是引用类型的数据，当多个实例引用同一个对象时，只要一个实例对这个对象进行操作，其他实例中的数据也会发生变化。而在Vue中，我们更多的是想要复用组件，那就需要每个组件都有自己的数据，这样组件之间才不会相互干扰。所以组件的数据不能写成对象的形式，而是要写成函数的形式。数据以函数返回值的形式定义，这样当我们每次复用组件的时候，就会返回一个新的data，也就是说每个组件都有自己的私有数据空间，它们各自维护自己的数据，不会干扰其他组件的正常运行。</li><li>说一下vue3.0你了解多少?</li><li>babel的工作流程，babel在traverser的时候使用了什么设计模式</li></ul></li><li><p>webpack相关</p><ul><li>webpack tree shaking 原理</li><li>webpack babel 配置：语法层面的和 API 层面的</li><li>webpack loader 和 plugin，有什么区别,实现原理</li><li>webpack执行流程和生命周期，让你实现一系列的生命周期怎么实现</li><li>webpack 打包过程</li><li>webpack 有哪些可优化的地方（构建速度和包体积），具体怎么优化</li><li>webpack的loader和plugin的,和有没有开发过loader和plugin</li></ul></li><li><p>网络相关</p><ul><li>输入 URL 之后发生了什么，HTML 文件中 CSS 文件和 JS 文件的加载顺序，会阻塞页面渲染吗</li><li>DNS 查询过程</li><li>DNS缓存流程</li><li>七层网络协议</li><li>websocket 的好处，怎么建立连接，心跳机制怎么做，错误怎么处理</li><li>webRTC 和 WebAssembly 了解吗</li><li>websocket 和 轮询的区别</li><li>postMessage 使用场景</li><li>cookie 的有效时间设置为 0 会怎么样</li><li>PUT 方法的优点，什么时候用 PUT</li><li>HTTP2 的改进点</li><li>HTTP3 使用的传输层协议是什么，怎么保证可靠性</li><li>HTTPS 为什么安全</li><li>http和https的区别</li><li>https加密过程</li><li>非对称加密和对称加密的区别</li><li>UDP和TCP有什么区别</li><li>content-length 的含义</li><li>http3 使用的 tcp 协议还是 udp</li><li>三次握手是什么？每个过程的状态是什么？</li><li>说一下常见的HTTP状态码?说一下状态码是302和304是什么意思？你在项目中出现过么？你是怎么解决的？</li></ul></li><li><p>算法</p><ul><li>二叉树层级遍历</li><li>给一个目标值，输出该目标值在二叉树中的路径</li><li>有效括号</li><li>合并两个有序列表/有序数组</li><li>计算JSON的深度</li><li>const arr = [12,3,34,12,13,12,12,34,45,[12,123,34,23,12,3,5,[212,24,35,45,45]] 把求这个数组里面出现次数最多的元素,把元素和出现次数返回</li></ul></li><li><p>其他</p><ul><li>工程化的理解和实践思路</li><li>webRTC里的stun和turn的区别？</li><li>数据存在硬盘和存在内存的区别？</li><li>说一下换肤怎么实现？</li><li>请用代码实现防抖和节流函数?</li><li>用代码封装一个函数方法，随机交换数组内的元素</li><li>用代码封装一个方法实现一个对象(对象里的属性值包含Array、object、String、Number等数据类型)的深拷贝。</li><li>简述对xss、sql汪入、csp、csr的理解。</li><li>用代码写一个正则表达式判断字符串是否为有效url(兼容http(s)瑞口)</li><li>项目中常用的性能优化方式有哪些?</li><li>怎么解决跨域问题的，你是怎么配置的</li><li>重绘和重排</li><li>浏览器的性能监控你是怎么做的</li><li>Diff算法是什么 ：key = index 为什么不常用数组的下标作为index 加了它有什么好处</li><li>虚拟列表你是怎么实现的</li><li>说一下SPA单页面有什么优缺点？</li><li>说一下前端登录的流程?<div class="hint-container tip"><p class="hint-container-title">回答</p><p>初次登录的时候，前端调后调的登录接口，发送用户名和密码，后端收到请求，验证用户名和密码，验证成功，就给前端返回一个token，和一个用户信息的值，前端拿到token，将token储存到Vuex中，然后从Vuex中把token的值存入浏览器Cookies中。把用户信息存到Vuex然后再存储到LocalStroage中,然后跳转到下一个页面，根据后端接口的要求，只要不登录就不能访问的页面需要在前端每次跳转页面师判断Cookies中是否有token，没有就跳转到登录页，有就跳转到相应的页面，我们应该再每次发送post/get请求的时候应该加入token，常用方法再项目utils/service.js中添加全局拦截器，将token的值放入请求头中 后端判断请求头中有无token，有token，就拿到token并验证token是否过期，在这里过期会返回无效的token然后有个跳回登录页面重新登录并且清除本地用户的信息</p></div></li><li>说一下前端权限管理怎么实现 <a href="https://blog.csdn.net/weixin_40599109/article/details/113728974" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/weixin_40599109/article/details/113728974</a></li><li>说一下常见的git操作</li><li>聊下跨域，如何发送 cookie</li><li>技术选型是怎么考虑的</li><li>团队管理是怎么考虑的，举一个 case</li><li>React 和 Vue 的对比</li><li>现在有一个网页打开很慢，要怎么定位</li><li>实现 EventEmitter</li><li>项目上线之前，有什么优化点？（从编码到上线过程都可以答）？</li><li>骨架屏的核心原理</li><li>图片懒加载核心概念</li><li>负载均衡原理</li><li>怎么理解函数式编程和面向对象编程？</li><li>说一下你最近在学习的新技术，怎么学的,用到项目里了吗？</li><li>对微前端有了解不，讲一下微前端发展，iframe-singlePA-qiankun，沙箱隔离</li><li>对前端可视化的理解</li><li>如果让你设局一个UI组件库，你会考虑哪些方面</li><li>工程化的理解和实践思路</li><li>html5新特性 webworker的原理</li><li>vite的优缺点</li><li>哪些操作可以阻塞页面渲染？</li><li>计算拿到document代码到首屏完成渲染的事件</li></ul></li></ol><p>参考文章： <a href="https://juejin.cn/post/7088883914005184525" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/7088883914005184525</a><a href="https://juejin.cn/post/7073869980411887652" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/7073869980411887652</a><a href="https://anonymity94.github.io/articles/2022-inverview.html#%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8" target="_blank" rel="noopener noreferrer">https://anonymity94.github.io/articles/2022-inverview.html#字节跳动</a></p>`,7)]))}const p=s(t,[["render",e]]),r=JSON.parse('{"path":"/skill/js/interview.html","title":"","lang":"zh-CN","frontmatter":{"description":"前端面试题 CSS相关： 各种选择器的优先级，看代码说出最后的样式结果 怎么开启动画加速，底层原理是什么 css实现一个三角形，画一个每条线的线宽是1px的三角形呢？ 常见的水平垂直方式有几种 标准盒模型和怪异盒模型的理解 Flex常见的属性 flex：1代表什么 Rem你是怎么做适配的 媒体查询是什么 首屏性能优化你是怎么做的 说一下bfc bfc有...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-25T11:48:40.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://github.com/Justice996/skill/js/interview.html"}],["meta",{"property":"og:site_name","content":"Justice的博客"}],["meta",{"property":"og:description","content":"前端面试题 CSS相关： 各种选择器的优先级，看代码说出最后的样式结果 怎么开启动画加速，底层原理是什么 css实现一个三角形，画一个每条线的线宽是1px的三角形呢？ 常见的水平垂直方式有几种 标准盒模型和怪异盒模型的理解 Flex常见的属性 flex：1代表什么 Rem你是怎么做适配的 媒体查询是什么 首屏性能优化你是怎么做的 说一下bfc bfc有..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-25T11:48:40.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-25T11:48:40.000Z"}]]},"git":{"createdTime":1689752268000,"updatedTime":1690285720000,"contributors":[{"name":"justice","username":"justice","email":"1393080039@qq.com","commits":2,"url":"https://github.com/justice"}]},"readingTime":{"minutes":11.66,"words":3498},"filePathRelative":"skill/js/interview.md","excerpt":"","autoDesc":true}');export{p as comp,r as data};
